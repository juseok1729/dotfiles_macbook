#!/bin/bash

# Alias
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias cp="cp -iv"
alias mkdir="mkdir -pv"
alias mv="mv -iv"
alias rm="rm -rf --"
alias ch="history -c && > ~/.bash_history"
alias ll="ls -alh"
alias map="xargs -n1"
alias p="cd ~/projects"
alias path='printf "%b\n" "${PATH//:/\\n}"'
alias vim="nvim"
alias tmux='tmux -u'

# Export
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export TERM="xterm-256color"
export SHELL="$(which bash)"

# Functions
datauri() {

    local mimeType=""

    if [ ! -f "$1" ]; then
        printf "%s is not a file.\n" "$1"
        return
    fi

    mimeType=$(file --brief --mime-type "$1")
    #               └─ do not prepend the filename to the output

    if [[ $mimeType == text/* ]]; then
        mimeType="$mimeType;charset=utf-8"
    fi

    printf "data:%s;base64,%s" \
        "$mimeType" \
        "$(openssl base64 -in "$1" | tr -d "\n")"

}

get_git_repository_details() {

    local branchName=""
    local tmp=""

    # Check if the current directory is in a Git repository.
    ! git rev-parse &>/dev/null \
        && return

    # Check if in `.git/` directory (some of the following
    # checks don't make sense/won't work in the `.git` directory).
    [ "$(git rev-parse --is-inside-git-dir)" == "true" ] \
        && return

    # Check for uncommitted changes in the index.
    if ! git diff --quiet --ignore-submodules --cached; then
        tmp="$tmp+";
    fi

    # Check for unstaged changes.
    if ! git diff-files --quiet --ignore-submodules --; then
        tmp="$tmp!";
    fi

    # Check for untracked files.
    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        tmp="$tmp?";
    fi

    # Check for stashed files.
    if git rev-parse --verify refs/stash &>/dev/null; then
        tmp="$tmp$";
    fi

    [ -n "$tmp" ] && tmp=" [$tmp]"

    branchName="$( printf "%s" "$( git rev-parse --abbrev-ref HEAD 2> /dev/null \
        || git rev-parse --short HEAD 2> /dev/null \
        || printf " (unknown)" )" | \
        tr -d "\n" )"

    printf "%s" "$1$branchName$tmp"

}

set_prompts() {

    local bold=$(tput bold 2> /dev/null)
    local reset=$(tput sgr0 2> /dev/null)

    gray=$(tput setaf 244)
    white=$(tput setaf 15)

    PS1="\[\033]0;\W\007\]"

    PS1+="$white$bold"
    PS1+="\w"
    PS1+="\$(get_git_repository_details \"$white on $gray\")"
    PS1+=" \[$reset\]\[$white\]➜  \[$reset\]"

    export PS1

}

set_prompts
unset -f set_prompts
